#!/bin/bash
# Source: https://github.com/cadorn/bash.origin
# License: http://unlicense.org/

###############################
# Declare Boot Globals
###############################

BO_LOG_PREFIX="[BO] "


###############################
# Declare Boot Functions
###############################

function BO_setResult {
	local  __resultvar=$1
    eval $__resultvar="'$2'"
	return 0
}

function BO_deriveSelfDir {
	# @source http://stackoverflow.com/a/246128/330439
	local SOURCE="$2"
	local DIR=""
	while [ -h "$SOURCE" ]; do
	  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	  SOURCE="$(readlink "$SOURCE")"
	  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
	done
	BO_setResult $1 "$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	return 0
}

function BO_sourceProfile {
	if [ -f "$HOME/.profile" ]; then
		. "$HOME/.profile"
	elif [ -f "$HOME/.bash_profile" ]; then
		. "$HOME/.bash_profile"
	fi
}


###############################
# Ensure minimal Environment
###############################

if [ -z "$HOME" ]; then
	echo "$BO_LOG_PREFIX""ERROR: 'HOME' environment variable is not set (file: ~/bash.origin)!"
	exit 1
fi


###############################
# Boot self
###############################

BO_sourceProfile

eval BO_SELF_BASH_SOURCE="$BO_READ_SELF_BASH_SOURCE"
BO_deriveSelfDir BO_DIR "$BO_SELF_BASH_SOURCE"


###############################
# Declare Globals
###############################

if [ "$BO_IS_SOURCING" == "1" ]; then
	__ON_INIT__BO_IS_SOURCING="1"
else
	__ON_INIT__BO_IS_SOURCING="0"
fi

BO_ROOT_SCRIPT_PATH="$HOME/bash.origin"
BO_READ_SELF_BASH_SOURCE="$""{BASH_SOURCE[0]:-$""0}"

BO_VERSION_NVM="0.10.37"
BO_VERSION_NVM_NODE="0.10"


###############################
# Declare Utility Functions
###############################

function BO_sourcePrototype {
	local __ON_INIT__BO_IS_SOURCING
	#echo "ENV: `( set -o posix ; set ) | less | grep BO_IS_SOURCING | while read line; do echo "___$line";done`"
	BO_IS_SOURCING="1"
    . "$1" ${*:2}
	#while IFS= read -r -d $'\0' line; do
	#    export "$line"
	#done < <(bash -s <<< 'export VARNAME=something; env -0')
}

function BO_isBeingSourced {
	BO_setResult $1 "$__ON_INIT__BO_IS_SOURCING"
}

function BO_ensure_node {
	if hash node 2>/dev/null; then
		return
	fi
	BO_sourceProfile
	if hash node 2>/dev/null; then
		return
	fi
	BO_ensure_nvm
	nvm use "$BO_VERSION_NVM_NODE"
}

function BO_ensure_nvm {
	# @see https://github.com/creationix/nvm
	if hash nvm 2>/dev/null; then
		return;
	fi
	# TODO: Ask user before installing nvm.
	echo "$BO_LOG_PREFIX""Installing nvm"
	curl "https://raw.githubusercontent.com/creationix/nvm/v$BO_VERSION_NVM/install.sh" | sh
	BO_sourceProfile
}

function BO_run_node {
	BO_ensure_node
	node $@
}

function BO_run_npm {
	BO_ensure_node
	npm $@
}


###############################
# Act
###############################

# TODO: Setup alias for `BO` so we can call from scripts.

if [ "$1" == "BO" ]; then

	## Usage: `bash.origin BO install [-f]
	if [ "$2" == "install" ]; then
		if [ "$3" == "-f" ]; then
			echo "$BO_LOG_PREFIX""Removing '$BO_ROOT_SCRIPT_PATH' due to forced-install (BO install -f)"
			rm -f "$BO_ROOT_SCRIPT_PATH" || true
		fi
		if [ ! -f "$BO_ROOT_SCRIPT_PATH" ]; then
			echo "$BO_LOG_PREFIX""Copying '$BO_DIR/bash.origin' to '$BO_ROOT_SCRIPT_PATH'"
			cp -f "$BO_DIR/bash.origin" "$BO_ROOT_SCRIPT_PATH"
		else
			# TODO: Copy if version has changed.
			echo "$BO_LOG_PREFIX""Skip copy of '$BO_DIR/bash.origin' as '$BO_ROOT_SCRIPT_PATH' already exists."
		fi
		echo "$BO_LOG_PREFIX""boot.origin installed!"
		exit 0
	fi

	echo "$BO_LOG_PREFIX""ERROR: Unknown BO command '$2'!"
	exit 1
fi
