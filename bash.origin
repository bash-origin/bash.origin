#!/bin/bash
# Source: https://github.com/cadorn/bash.origin
# License: http://unlicense.org/
set -e
function init {

###############################
# Declare Boot Globals
###############################

BO_LOG_PREFIX="[BO] "
BO_ROOT_SCRIPT_PATH="$HOME/.bash.origin"
BO_READ_SELF_BASH_SOURCE="$""{BASH_SOURCE[0]:-$""0}"


###############################
# Declare Boot Functions
###############################

function BO_setResult {
	local  __resultvar=$1
    eval $__resultvar="'$2'"
	return 0
}

function BO_deriveSelfDir {
	# @source http://stackoverflow.com/a/246128/330439
	local SOURCE="$2"
	local DIR=""
	while [ -h "$SOURCE" ]; do
	  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	  SOURCE="$(readlink "$SOURCE")"
	  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
	done
	BO_setResult $1 "$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	return 0
}

function BO_sourceProfile {
	if [ -f "$HOME/.profile" ]; then
		. "$HOME/.profile"
	elif [ -f "$HOME/.bash_profile" ]; then
		. "$HOME/.bash_profile"
	fi
}


###############################
# Ensure minimal Environment
###############################

if [ -z "$HOME" ]; then
	echo "$BO_LOG_PREFIX""ERROR: 'HOME' environment variable is not set (file: $BO_ROOT_SCRIPT_PATH)!"
	exit 1
fi


###############################
# Boot self
###############################

BO_sourceProfile

eval BO_SELF_BASH_SOURCE="$BO_READ_SELF_BASH_SOURCE"
BO_deriveSelfDir ___TMP___ "$BO_SELF_BASH_SOURCE"
local BO_DIR="$___TMP___"


###############################
# Declare Globals
###############################

if [ "$BO_IS_SOURCING" == "1" ]; then
	__ON_INIT__BO_IS_SOURCING="1"
else
	__ON_INIT__BO_IS_SOURCING="0"
fi

BO_ROOT_SOURCE_URL="https://raw.githubusercontent.com/bash-origin/bash.origin/master/bash.origin"
BO_SYSTEM_CACHE_DIR="$BO_DIR/.bash.origin.cache"

BO_VERSION_NVM="0.10.37"
BO_VERSION_NVM_NODE="0.10"
BO_VERSION_SMI_CLI="0.35.8"


###############################
# Init self
###############################

if [ ! -d "$BO_SYSTEM_CACHE_DIR" ]; then
	mkdir "$BO_SYSTEM_CACHE_DIR"
fi


###############################
# Declare Utility Functions
###############################

function BO_has {
  type "$1" > /dev/null 2>&1
}

function BO_sourcePrototype {
	local __ON_INIT__BO_IS_SOURCING
	#echo "ENV: `( set -o posix ; set ) | less | grep BO_IS_SOURCING | while read line; do echo "___$line";done`"
	BO_IS_SOURCING="1"
    . "$1" ${*:2}
	#while IFS= read -r -d $'\0' line; do
	#    export "$line"
	#done < <(bash -s <<< 'export VARNAME=something; env -0')
}

function BO_isSourced {
	BO_setResult $1 "$__ON_INIT__BO_IS_SOURCING"
}

function BO_ensure_node {
	if BO_has "node"; then
		return
	fi
	BO_sourceProfile
	if BO_has "node"; then
		return
	fi
	BO_ensure_nvm
	nvm use "$BO_VERSION_NVM_NODE"
}

function BO_ensure_nvm {
	# @see https://github.com/creationix/nvm
	if BO_has "nvm"; then
		return;
	fi
	# TODO: Ask user before installing.
	echo "$BO_LOG_PREFIX""Installing nvm"
	# TODO: Alternatively use `wget`
	curl "https://raw.githubusercontent.com/creationix/nvm/v$BO_VERSION_NVM/install.sh" | sh
	BO_sourceProfile
}

function BO_run_node {
	BO_ensure_node
	node $@
}

function BO_run_npm {
	BO_ensure_node
	npm $@
}

function BO_ensure_smi {
	BO_ensure_node
	local CACHED_PATH
	BO_isInSystemCache CACHED_PATH "github.com/sourcemint/smi" "$BO_VERSION_SMI_CLI" "install"
	if [ "$CACHED_PATH" == "" ]; then
		# TODO: Ask user before installing.
		echo "$BO_LOG_PREFIX""Installing smi"
		BO_systemCachePath CACHED_PATH "github.com/sourcemint/smi" "$BO_VERSION_SMI_CLI" "install"
		# TODO: Install into "$SMI_CACHE_PATH.`now`" and only rename on success.
		mkdir -p "$CACHED_PATH"
		# TODO: Stop this from also being written to stdout.
		echo '{"name":"tmp","version":"0.0.0","dependencies":{"smi.cli":"'$BO_VERSION_SMI_CLI'"}}' | tee "$CACHED_PATH/package.json"
		pushd "$CACHED_PATH"
			BO_run_npm install --production
		popd
	fi
	BO_setResult $1 "$CACHED_PATH"
}

function BO_run_smi {
	local SMI_CACHE_PATH
	BO_ensure_smi SMI_CACHE_PATH
	"$SMI_CACHE_PATH/node_modules/.bin/smi" $@
}

function BO_systemCachePath {
	local URI_DIRNAME=`echo "$2" | sed 's/\//~/g'`
	BO_setResult $1 "$BO_SYSTEM_CACHE_DIR/$URI_DIRNAME/$3/$4"
}

function BO_isInSystemCache {
	local CACHE_PATH
	BO_systemCachePath CACHE_PATH "$2" "$3" "$4"
	if [ -d "$CACHE_PATH" ]; then
		BO_setResult $1 "$CACHE_PATH"
	else
		BO_setResult $1 ""
	fi
}

function BO_downloadToSystemCache {
	local DOWNLOAD_PATH
	BO_systemCachePath DOWNLOAD_PATH "$2" "$3" "$4"
	local DOWNLOAD_URL="$5"
  	function download {
		if BO_has "curl"; then
			curl -L $*
		elif BO_has "wget"; then
			# Emulate curl with wget
			# @source https://github.com/creationix/nvm/blob/master/install.sh
			local ARGS=$(echo "$*" | command sed -e 's/--progress-bar /--progress=bar /' \
				-e 's/-L //' \
				-e 's/-I /--server-response /' \
				-e 's/-s /-q /' \
				-e 's/-o /-O /' \
				-e 's/-C - /-c /')
			wget $ARGS
		fi
  	}
  	if [ -f "$DOWNLOAD_PATH" ]; then
		echo "$BO_LOG_PREFIX""Download path '$DOWNLOAD_PATH' exists. Removing."
		rm -Rf "$DOWNLOAD_PATH"
  	fi
  	local DOWNLOAD_DIR="$( dirname "$DOWNLOAD_PATH")"
  	if [ ! -d "$DOWNLOAD_DIR" ]; then
		mkdir -p "$DOWNLOAD_DIR"
  	fi
	echo "$BO_LOG_PREFIX""Downloading '$DOWNLOAD_URL' to '$DOWNLOAD_PATH'"
	download -s "$DOWNLOAD_URL" -o "$DOWNLOAD_PATH" || {
		echo >&2 "$BO_LOG_PREFIX""Failed to download '$DOWNLOAD_URL'"
		return 1
	}
	BO_setResult $1 "$DOWNLOAD_PATH"
}

function BO_ensureInSystemCache {
	local DOWNLOAD_PATH
	BO_systemCachePath DOWNLOAD_PATH "$2" "$3" "$4"
	if [ ! -f "$DOWNLOAD_PATH" ]; then
		BO_downloadToSystemCache DOWNLOAD_PATH "$2" "$3" "$4" "$5"
	fi
	BO_setResult $1 "$DOWNLOAD_PATH"
}


###############################
# Act
###############################

function BO_self_install {
	if [ "$2" == "-f" ]; then
		echo "$BO_LOG_PREFIX""Removing '$BO_ROOT_SCRIPT_PATH' due to forced-install (BO install -f)"
		rm -f "$BO_ROOT_SCRIPT_PATH" || true
	fi
	if [ ! -f "$BO_ROOT_SCRIPT_PATH" ]; then
		echo "$BO_LOG_PREFIX""Copying '$1' to '$BO_ROOT_SCRIPT_PATH'"
		cp -f "$1" "$BO_ROOT_SCRIPT_PATH"
	else
		# TODO: Copy if version has changed.
		echo "$BO_LOG_PREFIX""Skip copy of '$1' as '$BO_ROOT_SCRIPT_PATH' already exists."
	fi
	echo "$BO_LOG_PREFIX""boot.origin installed!"
}

echo "BO: $BO"

if [ "$1" == "BO" ]; then
	## Usage: `bash.origin BO install [-f]
	if [ "$2" == "install" ]; then
		BO_self_install "$BO_DIR/bash.origin" "$3"
		exit 0
	elif [ "$2" == "update" ]; then
		local BASH_ORIGIN_PATH
		BO_downloadToSystemCache BASH_ORIGIN_PATH "github.com/bash-origin/bash.origin" "master" "bash.origin" "$BO_ROOT_SOURCE_URL"
		BO_self_install "$BASH_ORIGIN_PATH" -f
		echo "$BO_LOG_PREFIX""boot.origin updated!"
		exit 0
	fi
	echo "$BO_LOG_PREFIX""ERROR: Unknown BO command '$2'!"
	exit 1
elif [ "$BO" == "install" ]; then
echo "DO INSTALL!!"
	BO_self_install "$BO_DIR/bash.origin" "-f"
	BO=""
	exit 0
fi

}
init $@